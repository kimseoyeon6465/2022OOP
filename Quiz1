#include <iostream>

// quiz1
int countMatchedNumberLetterInString(const char* str, int digit)//성공
{
	int len = strlen(str);
	int result = 0;
	for (int i = 0; i < len; i++)
	{
		if (str[i] == digit + 48)//digit를 아스키코드로 바꿔서 비교
			result++;
	}
	return result;
}

// quiz2
void excludeRedundantLetters(char* str)//성공
{
	int len = strlen(str);
	char copy[100] = "";
	int check = 0;
	int index = 0;
	for (int i = 0; str[i] != '\0'; i++)//앞에서부터 한개씩 중복검사
	{
		for (int j = 0; copy[j] != '\0'; j++)//위에 for문에서 고른 배열 바로 다음 배열과 중복검사
		{
			if (str[i] == copy[j])
			{
				check++;//중복되면 check변수를 증가시킴
			}

		}
		if (check == 0)//중복되지 않으면 check는 0이므로 복사
		{
			copy[index] = str[i];
			index++;
		}
		check = 0;//새로 검사하기 위해 check를 0으로 만들어줌
	}
	for (int i = 0; copy[i] != '\0'; i++)
	{
		str[i] = copy[i];
		str[index] = '\0';//str을 복사한 배열 temp의 길이 index에 맞게 null문자 넣어줌
	}
}

// quiz3
int countWords(const char* str)//성공
{
	int blank = 0;//공백의 갯수를 세는 변수 blank 선언, 중복된 공백도 하나의 공백으로 계산
	for (int i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == ' ' || str[i] == '\t')//배열str의 값이 공백이면
		{
			blank++;//blank를 증가시킴
			if (str[i + 1] == ' ' || str[i + 1] == '\t')//공백의 다음글자도 공백이면
				blank--;//두개의 중복된 공백도 하나로 취급하기위해 blank를 감소시킴
		}
	}
	return blank + 1;//공백의갯수+1이 단어의 갯수
}


// quiz4
bool examinePairedParenthesis(const char* str)//성공
{
	int open = 0;//열린괄호의 갯수를 세는 변수 open선언
	int close = 0;//닫힌괄호의 갯수를 세는 변수 close선언
	bool ans;
	for (int i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == '(')
			open++;
		if (str[i] == ')')
			close++;
	}
	if (open == close)
	{
		if (str[0] == ')')//열린괄호의 갯수=닫힌괄호의 갯수가 같지만 닫힌 괄호로 시작하는 문자열 예>")()("
			ans = false;
		else
			ans = true;
	}
	else
		ans = false;
	return ans;
}

//quiz5
void convertString(char* str)//성공
{
	char copy[100] = "";
	int index = 0;
	for (int i = 0; str[i] != '\0'; i++)
	{
		if (str[i] != ' ')
		{
			copy[index] = str[i];//배열 str의 값이 공백이 아니면 배열 copy에 그대로 복사
			index++;
		}
		else
		{
			copy[index] = '%';//배열 str의 값이 공백이면 배열 copy에 한개씩 순서대로 %,2,0 넣어줌
			copy[index + 1] = '2';
			copy[index + 2] = '0';
			index = index + 3;
		}
	}
	for (int i = 0; copy[i] != '\0'; i++)//배열 copy에 완성된 문자열을 배열 str에 다시 복사
	{
		str[i] = copy[i];
	}
}

int main()
{
	int count = countMatchedNumberLetterInString("112233443311334913201234", 4);
	printf("quiz1: %d\n", count);

	char data[100]{ "Hello World" };
	excludeRedundantLetters(data);
	printf("quiz2: %s\n", data);

	int nWords = countWords("Hell World. Here	is the train\n");
	printf("quiz3: %d\n", nWords);

	bool result = examinePairedParenthesis("((()))");
	printf("quiz4: %s\n", result == true ? "true" : "false");

	char input[100] = "Hell World. Nice to Meet  you";
	convertString(input);
	printf("quiz5: %s\n", input);

	return 0;
}
